{"version":3,"file":"app_controls_AddressField_js.app.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAiD;AACF;AACjB;AACc;AAE5C,MAAMI,YAAY,GAAGA,CAAE;EAAEC,WAAW;EAAEC,WAAW;EAAEC,YAAY;EAAEC,WAAW;EAAE,GAAGC;AAAK,CAAC,KAAM;EAC5F,MAAM;IAAEC;EAAU,CAAC,GAAGT,8DAAW,CAAC,CAAC;;EAEnC;EACA,MAAMU,MAAM,GAAGX,+DAAY,CAAC,CAAC,CAC3BY,MAAM,CAAEC,KAAK,IAAI,CAAE,MAAM,EAAE,QAAQ,CAAE,CAACC,QAAQ,CAAED,KAAK,CAACE,IAAK,CAAE,CAAC,CAC9DC,GAAG,CAAEH,KAAK,IAAI,CAAEA,KAAK,CAACI,EAAE,EAAE,GAAIJ,KAAK,CAACK,IAAI,KAAOL,KAAK,CAACI,EAAE,GAAI,CAAG,CAAC;EAEjE,MAAME,YAAY,GAAGA,CAAEC,QAAQ,EAAEC,KAAK,KAAMb,WAAW,CAAE,eAAe,EAAEa,KAAM,CAAC;EAEjF,MAAMC,YAAY,GAAGA,CAAEF,QAAQ,EAAEC,KAAK,KAAM;IAC3C,MAAME,OAAO,GAAG,CAACH,QAAQ,CAACI,OAAO,CAACH,KAAK,GAAG,EAAE,GAAGD,QAAQ,CAACI,OAAO,CAACH,KAAK,GAAG,GAAG;IAC3ED,QAAQ,CAACI,OAAO,CAACH,KAAK,GAAGE,OAAO,GAAG,GAAIb,SAAS,CAAC,CAAC,IAAI,EAAE,GAAKW,KAAK,EAAG;IAErEb,WAAW,CAAE,eAAe,EAAEY,QAAQ,CAACI,OAAO,CAACH,KAAM,CAAC;EACvD,CAAC;EAGD,OACCI,oDAAA,CAACvB,+CAAM;IAACwB,OAAO,EAAGrB,WAAa;IAAA,GAAMI;EAAI,GACxCgB,oDAAA,CAACtB,sDAAa;IACbc,EAAE,EAAGZ,WAAa;IAClBE,YAAY,EAAGA,YAAc;IAC7BD,WAAW,EAAGA,WAAa;IAC3BqB,QAAQ,EAAG,IAAM;IACjBC,KAAK,EAAGjB,MAAQ;IAChBkB,QAAQ,EAAGV,YAAc;IACzBW,QAAQ,EAAGR;EAAc,CACzB,CACM,CAAC;AAEX,CAAC;AAED,iEAAelB,YAAY","sources":["webpack:///./app/controls/AddressField.js"],"sourcesContent":["import useAllFields from '../hooks/useAllFields';\nimport useSettings from '../hooks/useSettings';\nimport DivRow from './DivRow';\nimport FieldInserter from './FieldInserter';\n\nconst AddressField = ( { componentId, placeholder, defaultValue, updateField, ...rest } ) => {\n\tconst { getPrefix } = useSettings();\n\n\t// Select only text and select fields.\n\tconst fields = useAllFields()\n\t\t.filter( field => [ 'text', 'select' ].includes( field.type ) )\n\t\t.map( field => [ field.id, `${ field.name } (${ field.id })` ] );\n\n\tconst handleChange = ( inputRef, value ) => updateField( 'address_field', value );\n\n\tconst handleSelect = ( inputRef, value ) => {\n\t\tconst address = !inputRef.current.value ? '' : inputRef.current.value + ',';\n\t\tinputRef.current.value = address + `${ getPrefix() || '' }${ value }`;\n\n\t\tupdateField( 'address_field', inputRef.current.value );\n\t};\n\n\n\treturn (\n\t\t<DivRow htmlFor={ componentId } { ...rest }>\n\t\t\t<FieldInserter\n\t\t\t\tid={ componentId }\n\t\t\t\tdefaultValue={ defaultValue }\n\t\t\t\tplaceholder={ placeholder }\n\t\t\t\trequired={ true }\n\t\t\t\titems={ fields }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\tonSelect={ handleSelect }\n\t\t\t/>\n\t\t</DivRow>\n\t);\n};\n\nexport default AddressField;"],"names":["useAllFields","useSettings","DivRow","FieldInserter","AddressField","componentId","placeholder","defaultValue","updateField","rest","getPrefix","fields","filter","field","includes","type","map","id","name","handleChange","inputRef","value","handleSelect","address","current","createElement","htmlFor","required","items","onChange","onSelect"],"sourceRoot":""}