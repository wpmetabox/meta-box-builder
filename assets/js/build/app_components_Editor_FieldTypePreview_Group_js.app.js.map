{"version":3,"file":"app_components_Editor_FieldTypePreview_Group_js.app.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAqC;AACY;AACH;AACC;AACpB;AAE3B,MAAMK,KAAK,GAAGA,CAAE;EAAEC,KAAK;EAAEC;AAAO,CAAC,KAAM;EACtC,MAAM;IAAEC,MAAM;IAAE,GAAGC;EAAa,CAAC,GAAGP,2DAAO,CAAEI,KAAK,CAACI,GAAI,CAAC,CAAC,CAAC;EAE1D,MAAMC,SAAS,GAAGC,CAAC,IAAI;IACtB;IACA;IACA,IAAKA,CAAC,CAACC,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAE,oBAAqB,CAAC,EAAG;MACxDN,YAAY,CAACO,UAAU,CAAEJ,CAAC,CAACK,IAAI,CAACC,OAAO,CAACC,IAAI,EAAEP,CAAC,CAACQ,iBAAkB,CAAC;IACpE;EACD,CAAC;;EAED;EACA;EACA;EACA,MAAMC,OAAO,GAAGC,IAAI,IAAIb,YAAY,CAACc,SAAS,CAAE,CAAE,GAAGD,IAAI,CAAE,CAACE,MAAM,CAAEC,CAAC,IAAIA,CAAC,EAAEf,GAAG,KAAKgB,SAAU,CAAE,CAAC;EAEjGC,OAAO,CAACC,KAAK,CAAE,aAActB,KAAK,CAACI,GAAG,EAAG,EAAE,cAAe,CAAC;EAE3D,OACCmB,oDAAA,CAAAC,2CAAA,QACCD,oDAAA,CAACE,mBAAmB;IAACzB,KAAK,EAAGA;EAAO,CAAE,CAAC,EAEvCuB,oDAAA,CAAC5B,2DAAa;IACb+B,SAAS,EAAC,mCAAmC;IAC7CC,KAAK,EAAG,CAAG;IACXC,gBAAgB,EAAG,KAAO;IAC1BC,mBAAmB,EAAG,CAAG;IACzBC,SAAS,EAAG,GAAK;IACjBC,UAAU,EAAG,IAAM;IACnBC,KAAK,EAAG;MACPC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE,IAAI;MAAE;MACZC,GAAG,EAAE,IAAI,CAAE;IACZ,CAAG;IACHnB,IAAI,EAAGd,MAAQ;IACfa,OAAO,EAAGA,OAAS;IACnBqB,KAAK,EAAG/B;EAAW,GAGlBH,MAAM,CAACmC,GAAG,CAAElB,CAAC,IAAII,oDAAA,CAACzB,6CAAI;IACrBwC,GAAG,EAAGnB,CAAC,CAACf,GAAK;IACbJ,KAAK,EAAGmB,CAAG;IACXlB,MAAM,EAAG,GAAIA,MAAM,IAAMD,KAAK,CAACI,GAAG,WAAc;IAAA,GAC3CD;EAAY,CACjB,CAAE,CAEU,CAAC,EAChBoB,oDAAA,CAAC1B,uDAAc;IAAC0C,IAAI,EAAG7C,mDAAE,CAAE,gBAAgB,EAAE,kBAAmB,CAAG;IAAC8C,OAAO,EAAC,WAAW;IAAA,GAAMrC;EAAY,CAAI,CAC5G,CAAC;AAEL,CAAC;AAED,MAAMsB,mBAAmB,GAAGA,CAAE;EAAEzB;AAAM,CAAC,KAAM;EAC5C,IAAK,CAACA,KAAK,CAACyC,WAAW,EAAG;IACzB;EACD;EAEA,MAAMC,UAAU,GAAG1C,KAAK,CAAC2C,WAAW,KAAM3C,KAAK,CAAC4C,KAAK,GAAGlD,mDAAE,CAAE,WAAW,EAAE,kBAAmB,CAAC,GAAGA,mDAAE,CAAE,OAAO,EAAE,kBAAmB,CAAC,CAAE;EAEnI,OACC6B,oDAAA,CAAAC,2CAAA,QACCD,oDAAA;IAAKG,SAAS,EAAC;EAA0B,GACxCH,oDAAA;IAAIG,SAAS,EAAC;EAAkB,GAAGgB,UAAgB,CAC/C,CAAC,EACNnB,oDAAA;IAAQG,SAAS,EAAC;EAAsC,GACvDH,oDAAA;IAAMG,SAAS,EAAC;EAA6B,CAAE,CACxC,CACP,CAAC;AAEL,CAAC;AAED,iEAAe3B,KAAK","sources":["webpack:///./app/components/Editor/FieldTypePreview/Group.js"],"sourcesContent":["import { __ } from '@wordpress/i18n';\nimport { ReactSortable } from 'react-sortablejs';\nimport getList from '../../../list-functions';\nimport AddFieldButton from '../AddFieldButton';\nimport Node from '../Node';\n\nconst Group = ( { field, parent } ) => {\n\tconst { fields, ...fieldActions } = getList( field._id )();\n\n\tconst handleAdd = e => {\n\t\t// Only handle when drag from the Add Field panel.\n\t\t// We need to add a field manually at the given position.\n\t\tif ( e.from.classList.contains( 'og-add-field__list' ) ) {\n\t\t\tfieldActions.addFieldAt( e.item.dataset.type, e.newDraggableIndex );\n\t\t}\n\t};\n\n\t// If we drag a field type from the Add New panel, it won't have a proper format as a field object\n\t// As we manually added the field with a correct format in the handleAdd() function above\n\t// We need to remove the auto-added item by SortableJS.\n\tconst setList = list => fieldActions.setFields( [ ...list ].filter( f => f?._id !== undefined ) );\n\n\tconsole.debug( `%c  Group ${ field._id }`, \"color:orange\" );\n\n\treturn (\n\t\t<>\n\t\t\t<CollapsibleElements field={ field } />\n\n\t\t\t<ReactSortable\n\t\t\t\tclassName=\"mb-field--group__fields mb-fields\"\n\t\t\t\tdelay={ 0 }\n\t\t\t\tdelayOnTouchOnly={ false }\n\t\t\t\ttouchStartThreshold={ 0 }\n\t\t\t\tanimation={ 200 }\n\t\t\t\tinvertSwap={ true }\n\t\t\t\tgroup={ {\n\t\t\t\t\tname: 'nested',\n\t\t\t\t\tpull: true, // Allow to drag fields to other lists\n\t\t\t\t\tput: true, // Allow to receive fields from other lists\n\t\t\t\t} }\n\t\t\t\tlist={ fields }\n\t\t\t\tsetList={ setList }\n\t\t\t\tonAdd={ handleAdd }\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tfields.map( f => <Node\n\t\t\t\t\t\tkey={ f._id }\n\t\t\t\t\t\tfield={ f }\n\t\t\t\t\t\tparent={ `${ parent }[${ field._id }][fields]` }\n\t\t\t\t\t\t{ ...fieldActions }\n\t\t\t\t\t/> )\n\t\t\t\t}\n\t\t\t</ReactSortable>\n\t\t\t<AddFieldButton text={ __( '+ Add Subfield', 'meta-box-builder' ) } variant='secondary' { ...fieldActions } />\n\t\t</>\n\t);\n};\n\nconst CollapsibleElements = ( { field } ) => {\n\tif ( !field.collapsible ) {\n\t\treturn;\n\t}\n\n\tconst groupTitle = field.group_title || ( field.clone ? __( 'Entry {#}', 'meta-box-builder' ) : __( 'Entry', 'meta-box-builder' ) );\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"rwmb-group-title-wrapper\">\n\t\t\t\t<h4 className=\"rwmb-group-title\">{ groupTitle }</h4>\n\t\t\t</div>\n\t\t\t<button className=\"rwmb-group-toggle-handle button-link\">\n\t\t\t\t<span className=\"rwmb-group-toggle-indicator\" />\n\t\t\t</button>\n\t\t</>\n\t);\n};\n\nexport default Group;"],"names":["__","ReactSortable","getList","AddFieldButton","Node","Group","field","parent","fields","fieldActions","_id","handleAdd","e","from","classList","contains","addFieldAt","item","dataset","type","newDraggableIndex","setList","list","setFields","filter","f","undefined","console","debug","createElement","Fragment","CollapsibleElements","className","delay","delayOnTouchOnly","touchStartThreshold","animation","invertSwap","group","name","pull","put","onAdd","map","key","text","variant","collapsible","groupTitle","group_title","clone"],"sourceRoot":""}